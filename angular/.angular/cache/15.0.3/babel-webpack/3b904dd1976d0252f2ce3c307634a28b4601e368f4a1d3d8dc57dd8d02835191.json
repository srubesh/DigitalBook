{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_URL = 'http://localhost:8081/digitalbooks/';\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n  }\n  // getPublicContent(): Observable<any> {\n  //   return this.http.get(API_URL + 'all', { responseType: 'text' });\n  // }\n  //author/{author-id}/books\n  createBook(image, create, authorId) {\n    const formdata = new FormData();\n    formdata.append('image', image);\n    formdata.append('title', create.title);\n    formdata.append('category', create.category);\n    formdata.append('price', create.price);\n    formdata.append('publisher', create.publisher);\n    formdata.append('active', create.active);\n    formdata.append('content', create.content);\n    return this.http.post(API_URL + 'author/' + authorId + '/books', formdata, {\n      responseType: 'json'\n    });\n  }\n  //author/{author-id}/books/{book-id}\n  updateBook(image, update, authorId, bookId) {\n    const formdata = new FormData();\n    formdata.append('image', image);\n    formdata.append('title', update.title);\n    formdata.append('category', update.category);\n    formdata.append('price', update.price);\n    formdata.append('publisher', update.publisher);\n    formdata.append('active', update.active);\n    formdata.append('content', update.content);\n    return this.http.post(API_URL + 'author/' + authorId + '/books/' + bookId, formdata, {\n      responseType: 'json'\n    });\n  }\n  getAllBooks(authorId) {\n    return this.http.get(API_URL + 'author/' + authorId, {\n      responseType: 'json'\n    });\n  }\n  getBook(bookId) {\n    return this.http.get(API_URL + 'test/' + bookId, {\n      responseType: 'json'\n    });\n  }\n  blockOrUnblockBook(authorId, bookId, block) {\n    return this.http.put(API_URL + 'author/' + authorId + '/books/' + bookId + \"/\" + block, {\n      responseType: 'json'\n    });\n  }\n  //readers/{emailId}/books\n  getSubscribedBooks(readerEmail) {\n    return this.http.get(API_URL + 'readers/' + readerEmail + \"/books\", {\n      responseType: 'json'\n    });\n  }\n  //readers/{email-id}/books/{subscription-id}/cancel-subscription\n  unSubscriveBook(readerEmail, subscriptionId) {\n    return this.http.put(API_URL + 'readers/' + readerEmail + '/books/' + subscriptionId + \"/cancel-subscription\", {\n      responseType: 'json'\n    });\n  }\n  ///{book-id}/subscribe\n  subscribeBook(email, bookId) {\n    return this.http.post(API_URL + bookId + '/subscribe', {\n      bookId,\n      email\n    }, {\n      responseType: 'json'\n    });\n  }\n  //readers/{emailId}/books/{subscription-id}/read\n  getBookContent(readerEmail, subscriptionId) {\n    return this.http.get(API_URL + 'readers/' + readerEmail + '/books/' + subscriptionId + \"/read\", {\n      responseType: 'json'\n    });\n  }\n  //all/authors\n  // getAllAuthors(): Observable<any> {\n  //   return this.http.get(API_URL + 'all/authors', { responseType: 'json' });\n  // }\n  //'searchBook?title=&author=&publishedDate=&publisher='\n  searchBook(searchQuery) {\n    if (searchQuery === null || searchQuery === undefined) return this.http.get(API_URL + 'searchBook?title=&author=&publishedDate=&publisher=', {\n      responseType: 'json'\n    });\n    return this.http.get(API_URL + searchQuery, {\n      responseType: 'json'\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["API_URL","UserService","constructor","http","createBook","image","create","authorId","formdata","FormData","append","title","category","price","publisher","active","content","post","responseType","updateBook","update","bookId","getAllBooks","get","getBook","blockOrUnblockBook","block","put","getSubscribedBooks","readerEmail","unSubscriveBook","subscriptionId","subscribeBook","email","getBookContent","searchBook","searchQuery","undefined","factory","providedIn"],"sourceRoot":"","sources":["C:\\H&T Training\\DigitalBook\\DigitalBook\\angular\\src\\app\\_services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nconst API_URL = 'http://localhost:8081/digitalbooks/';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // getPublicContent(): Observable<any> {\r\n  //   return this.http.get(API_URL + 'all', { responseType: 'text' });\r\n  // }\r\n\r\n  //author/{author-id}/books\r\n  createBook(image : File, create : any, authorId : number){\r\n    const formdata : FormData = new FormData();\r\n    formdata.append('image',image);\r\n    formdata.append('title',create.title);\r\n    formdata.append('category',create.category);\r\n    formdata.append('price',create.price);\r\n    formdata.append('publisher',create.publisher);\r\n    formdata.append('active',create.active);\r\n    formdata.append('content',create.content);\r\n\r\n    return this.http.post(API_URL +'author/'+authorId+'/books',formdata, { responseType: 'json' });\r\n  }\r\n\r\n  //author/{author-id}/books/{book-id}\r\n  updateBook(image : File, update : any, authorId : number, bookId:number){\r\n    const formdata : FormData = new FormData();\r\n    formdata.append('image',image);\r\n    formdata.append('title',update.title);\r\n    formdata.append('category',update.category);\r\n    formdata.append('price',update.price);\r\n    formdata.append('publisher',update.publisher);\r\n    formdata.append('active',update.active);\r\n    formdata.append('content',update.content);\r\n\r\n    return this.http.post(API_URL +'author/'+authorId+'/books/'+bookId,formdata, { responseType: 'json' });\r\n  }\r\n\r\n  getAllBooks(authorId : number): Observable<any> {\r\n    return this.http.get(API_URL + 'author/'+authorId, { responseType: 'json' });\r\n  }\r\n\r\n  getBook(bookId : any): Observable<any> {\r\n    return this.http.get(API_URL + 'test/'+bookId, { responseType: 'json' });\r\n  }\r\n  \r\n  blockOrUnblockBook(authorId : number,bookId : number, block : string){\r\n    return this.http.put(API_URL + 'author/'+authorId+'/books/'+bookId+\"/\"+block, { responseType: 'json' });\r\n  }\r\n\r\n  //readers/{emailId}/books\r\n  getSubscribedBooks(readerEmail : string): Observable<any> {\r\n    return this.http.get(API_URL + 'readers/'+readerEmail+\"/books\", { responseType: 'json' });\r\n  }\r\n\r\n  //readers/{email-id}/books/{subscription-id}/cancel-subscription\r\n  unSubscriveBook(readerEmail : string, subscriptionId : string){\r\n    return this.http.put(API_URL + 'readers/'+readerEmail+'/books/'+subscriptionId+\"/cancel-subscription\", { responseType: 'json' });\r\n  }\r\n\r\n  ///{book-id}/subscribe\r\n  subscribeBook(email : string, bookId : number){\r\n    return this.http.post(API_URL +bookId+'/subscribe',{\r\n      bookId,\r\n      email\r\n    }, { responseType: 'json' });\r\n  }\r\n\r\n\r\n  //readers/{emailId}/books/{subscription-id}/read\r\n  getBookContent(readerEmail : string, subscriptionId : string){\r\n    return this.http.get(API_URL + 'readers/'+readerEmail+'/books/'+subscriptionId+\"/read\", { responseType: 'json' });\r\n  }\r\n\r\n  //all/authors\r\n  // getAllAuthors(): Observable<any> {\r\n  //   return this.http.get(API_URL + 'all/authors', { responseType: 'json' });\r\n  // }\r\n\r\n  //'searchBook?title=&author=&publishedDate=&publisher='\r\n  searchBook(searchQuery : any ):  Observable<any> {\r\n    if(searchQuery === null || searchQuery === undefined)\r\n      return this.http.get(API_URL + 'searchBook?title=&author=&publishedDate=&publisher=', { responseType: 'json' });\r\n    return this.http.get(API_URL + searchQuery, { responseType: 'json' });\r\n  }\r\n\r\n  // getModeratorBoard(): Observable<any> {\r\n  //   return this.http.get(API_URL + 'mod', { responseType: 'text' });\r\n  // }\r\n\r\n  // getAdminBoard(): Observable<any> {\r\n  //   return this.http.get(API_URL + 'admin', { responseType: 'text' });\r\n  // }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}